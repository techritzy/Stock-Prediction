# -*- coding: utf-8 -*-
"""Copy of Stock Price Predictor 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GML5aRnesZO0y_FrB1lykOJTrFjNW10R
"""

# Import the libraries
import pandas as pd
import numpy as np
import datetime
from sklearn import datasets
import pandas_datareader as web
from pandas_datareader import data
from pandas.io.formats.style_render import DataFrame
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from sklearn.model_selection import train_test_split
from keras.layers import Dense, Dropout, LSTM, Bidirectional
import matplotlib.pyplot as plt
#plt.style.use('fivethirtyeight')

from google.colab import files
dataset = files.upload()

gstock_data = pd.read_csv('Copy of ADANIPORTS.csv')
gstock_data .head()

gstock_data.shape

gstock_data.info()

gstock_data = gstock_data[['Date','Open','Close']] # Extracting required columns
gstock_data['Date'] = pd.to_datetime(gstock_data['Date'].apply(lambda x: x.split()[0])) # Selecting only date
gstock_data.set_index('Date',drop=True,inplace=True) # Setting date column as index
gstock_data.head()

fg, ax =plt.subplots(1,2,figsize=(20,7))
ax[0].plot(gstock_data ['Open'],label='Open',color='green')
ax[0].set_xlabel('Date',size=15)
ax[0].set_ylabel('Price',size=15)
ax[0].legend()
ax[1].plot(gstock_data ['Close'],label='Close',color='red')
ax[1].set_xlabel('Date',size=15)
ax[1].set_ylabel('Price',size=15)
ax[1].legend()
fg.show()

from sklearn.preprocessing import MinMaxScaler
MMS = MinMaxScaler()
gstock_data[gstock_data.columns] = MMS.fit_transform(gstock_data)

# Selecting 80 % for training and 20 % for testing
training_size = round(len(gstock_data ) * 0.80)
training_size

train_data = gstock_data [:training_size]
test_data  = gstock_data [training_size:]
train_data.shape, test_data.shape

# Function to create sequence of data for training and testing
def create_sequence(dataset):
  sequences = []
  labels = []

  start_idx = 0

  for stop_idx in range(50,len(dataset)): # Selecting 50 rows at a time
    sequences.append(dataset.iloc[start_idx:stop_idx])
    labels.append(dataset.iloc[stop_idx])
    start_idx += 1
  return (np.array(sequences),np.array(labels))

train_seq, train_label = create_sequence(train_data)
test_seq, test_label = create_sequence(test_data)

train_seq.shape, train_label.shape, test_seq.shape, test_label.shape

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape = (train_seq.shape[1], train_seq.shape[2])))

model.add(Dropout(0.1))
model.add(LSTM(units=50))

model.add(Dense(2))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

model.summary()

model.fit(train_seq, train_label, epochs=80,validation_data=(test_seq, test_label), verbose=1)

test_predicted = model.predict(test_seq)
test_predicted[:20]

test_inverse_predicted = MMS.inverse_transform(test_predicted)
test_inverse_predicted[:20]

# Merging actual and predicted data for better visualization

gs_slic_data = pd.concat([gstock_data.iloc[-614:].copy(),pd.DataFrame(test_inverse_predicted,columns=['Open_predicted','Close_predicted'],index=gstock_data.iloc[-614:].index)], axis=1)

gs_slic_data[['Open','Close']] =MMS.inverse_transform(gs_slic_data[['Open','Close']]) # Inverse scaling

gs_slic_data.head(10)

gs_slic_data[['Open','Open_predicted']].plot(figsize=(20,10))
plt.xticks(rotation=45)
plt.xlabel('Date',size=40)
plt.ylabel('Stock Price',size=50)
plt.title('Actual vs Predicted for open price',size=40)
plt.show()

gs_slic_data[['Close','Close_predicted']].plot(figsize=(20,10))
plt.xticks(rotation=45)
plt.xlabel('Date',size=40)
plt.ylabel('Stock Price',size=40)
plt.title('Actual vs Predicted for close price',size=45)
plt.show()